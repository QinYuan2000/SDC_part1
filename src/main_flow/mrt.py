from src.utilities.ilp_manager import *
from src.utilities.cdfg_manager import *
import logging

############################################################################################################################################
############################################################################################################################################
#
#	`MRT` CLASS
#
############################################################################################################################################
#	DESCRIPTION:
#					The following class is used for the Modulo Reservation Table (MRT) for resource sharing in pipelined SDC
############################################################################################################################################
#	ATTRIBUTES:
#					- mrt : is the MRT dictionary where the keys are the clock cycles and the values are lists of operations
############################################################################################################################################
#	FUNCTIONS:
#					- generate : it generates the MRT for a given ILP solution
#					- is_legal : it checks if the MRT is legal
############################################################################################################################################
############################################################################################################################################

class MRT: # Modulo Reservation Table (MRT)
	def __init__(self, ilp):
		self.generate(ilp)

	"""
	Iterate over the scheduling solution and create its MRT
	"""
	def generate(self, ilp):
		# TODO: write your code here
		pass

	"""
	Check each clock cycle of the MRT and verify that the specified operation is not scheduled max_allowed_instances times in the same clock cycle
	@param operation: the operation to be checked
	@param clock_time: the clock cycle to be checked
	@param max_allowed_instances: how many operations of the specified kind are allowed in one clock cycle
	@param operations_solved: the list of operations that have been scheduled(assigned to a clock cycle), generated by the function that adds the pipelined resource constraints using the MRT
	"""
	def is_legal(self, operation, clock_time, max_allowed_instances, operations_solved):
		# TODO: write your code here
		pass
